#!/usr/bin/env python

import os
import sys
import json
import argparse

import hgapi
from boto import connect_sqs
from boto.sqs.jsonmessage import JSONMessage


parser = argparse.ArgumentParser()
parser.add_argument("--json", action="store_true")
args = parser.parse_args()

repo = hgapi.Repo(".")
rev = repo.revision(os.getenv("HG_NODE"))

aws_access_key_id = repo.config("hgsqs", "aws_access_key_id")
aws_secret_access_key = repo.config("hgsqs", "aws_secret_access_key")
queue_names = repo.config("hgsqs", "queues") or ""

if aws_access_key_id is None or aws_secret_access_key is None:
    print("warning: hgsqs is enabled but missing aws config")
    sys.exit(1)

queue_names = [n.strip() for n in queue_names.split(",") if n.strip()]

if not queue_names:
    print("warning: hgsqs is enabled but missing queues")
    sys.exit(1)

msg = {
    "repo": os.path.basename(os.path.abspath(".")),
    "node": rev.node,
    "rev": rev.rev,
    "author": rev.author,
    "date": rev.date,
    "tags": rev.tags,
    "desc": rev.desc,
    "branch": rev.branch,
}

if args.json:
    print(json.dumps(msg))
    sys.exit(0)

conn = connect_sqs(aws_access_key_id, aws_secret_access_key)

for name in queue_names:
    queue = conn.get_queue(name)
    if queue is None:
        queue = conn.create_queue(name)
    queue.set_message_class(JSONMessage)
    queue.write(queue.new_message(msg))
    print("sent changeset to {} SQS queue".format(name))
